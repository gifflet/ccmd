name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.22', '1.23']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Configure SSH for private repos
        if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # Only configure SSH if we have the private key
          if [ -n "$SSH_PRIVATE_KEY" ]; then
            mkdir -p ~/.ssh
            echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts 2>/dev/null
            # Start SSH agent
            eval "$(ssh-agent -s)" > /dev/null
            ssh-add ~/.ssh/id_rsa 2>/dev/null
            # Test SSH connection (suppress output for security)
            ssh -T git@github.com 2>&1 | grep -q "successfully authenticated" && echo "SSH configured successfully" || echo "SSH configuration completed"
          else
            echo "SSH private key not configured, skipping SSH setup"
          fi

      - name: Download dependencies
        run: make deps

      - name: Format check
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted. Please run 'make fmt'"
            exit 1
          fi

      - name: Vet
        run: make vet

      - name: Test
        run: make test

      - name: Test with race detector
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          fail_ci_if_error: false
          verbose: true

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Build
        run: make build

      - name: Test binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./dist/ccmd.exe --version
          else
            ./dist/ccmd --version
          fi
        shell: bash

  cross-compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Build all platforms
        run: make build-all

      - name: List artifacts
        run: ls -la dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ccmd-all-platforms
          path: dist/*